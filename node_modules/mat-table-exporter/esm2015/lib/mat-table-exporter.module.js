import { __decorate } from "tslib";
import { CdkTableExporterModule } from 'cdk-table-exporter';
import { MatTableModule } from '@angular/material/table';
import { NgModule } from '@angular/core';
import { MatTableExporterDirective } from './mat-table-exporter.directive';
import * as ɵngcc0 from '@angular/core';
let MatTableExporterModule = class MatTableExporterModule {
};
MatTableExporterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTableExporterModule });
MatTableExporterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTableExporterModule_Factory(t) { return new (t || MatTableExporterModule)(); }, imports: [[
            MatTableModule,
            CdkTableExporterModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableExporterModule, { declarations: function () { return [MatTableExporterDirective]; }, imports: function () { return [MatTableModule,
        CdkTableExporterModule]; }, exports: function () { return [MatTableExporterDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTableExporterModule, [{
        type: NgModule,
        args: [{
                declarations: [MatTableExporterDirective],
                imports: [
                    MatTableModule,
                    CdkTableExporterModule
                ],
                exports: [MatTableExporterDirective]
            }]
    }], null, null); })();
export { MatTableExporterModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXRhYmxlLWV4cG9ydGVyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibWF0LXRhYmxlLWV4cG9ydGVyL2xpYi9tYXQtdGFibGUtZXhwb3J0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFXM0UsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7QUFBRyxDQUFDLENBQUE7QUFBMUIsc0JBQXNCLG9CQVJsQyxRQUFRLENBQUMsVUFDUixZQUFZLEVBQUUsQ0FBQztZQUF5QixDQUFDLFVBQ3pDLE9BQU8sRUFBRSxjQUNQLGNBQWMsY0FDZCxzQkFBc0IsVUFDdkIsVUFDRCxPQUFPLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxNQUNyQyxDQUFDLElBQ1c7Z0JBQXNCLENBQUk7Ozs7Ozs7Ozs7Ozs7OzswQkFDdkM7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2RrVGFibGVFeHBvcnRlck1vZHVsZSB9IGZyb20gJ2Nkay10YWJsZS1leHBvcnRlcic7XHJcbmltcG9ydCB7IE1hdFRhYmxlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFibGUnO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRUYWJsZUV4cG9ydGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9tYXQtdGFibGUtZXhwb3J0ZXIuZGlyZWN0aXZlJztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW01hdFRhYmxlRXhwb3J0ZXJEaXJlY3RpdmVdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIE1hdFRhYmxlTW9kdWxlLFxyXG4gICAgQ2RrVGFibGVFeHBvcnRlck1vZHVsZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW01hdFRhYmxlRXhwb3J0ZXJEaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXRUYWJsZUV4cG9ydGVyTW9kdWxlIHsgfVxyXG4iXX0=